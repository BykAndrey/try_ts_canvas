(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ObjectScene = /** @class */ (function () {
    function ObjectScene(context, x, y) {
        if (x === void 0) { x = 0; }
        if (y === void 0) { y = 0; }
        this.ctx = context;
        this._x = x;
        this._y = y;
        /*console.log({
          x: this._x,
          y: this._y
        });*/
        this.update();
    }
    ObjectScene.prototype.getPosition = function () {
        return {
            x: this._x,
            y: this._y
        };
    };
    ObjectScene.prototype.setPosition = function (x, y) {
        this._x = x;
        this._y = y;
    };
    ObjectScene.prototype.update = function () {
        //console.log("update");
    };
    return ObjectScene;
}());
exports.default = ObjectScene;
},{}],2:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ObjectScene_1 = require("./ObjectScene");
var config_1 = require("./../config");
var Point = /** @class */ (function (_super) {
    __extends(Point, _super);
    function Point(context, id, x, y, r, speed) {
        if (x === void 0) { x = 0; }
        if (y === void 0) { y = 0; }
        if (r === void 0) { r = 10; }
        if (speed === void 0) { speed = 3; }
        var _this = _super.call(this, context, x, y) || this;
        _this._directionX = Math.random() - 0.5;
        _this._directionY = Math.random() - 0.5;
        _this._speed = 2;
        _this._opacity = 0.1;
        _this._id = 1;
        _this._id = id;
        _this._r = r;
        _this._speed = speed;
        return _this;
    }
    Point.prototype.getRadius = function () {
        return this._r;
    };
    Point.prototype.setRadius = function (r) {
        this._r = r;
    };
    Point.prototype.resetOpacity = function () {
        this._opacity = 0;
    };
    Point.prototype.setOpacity = function (opacity) {
        this._opacity = opacity > this._opacity ? opacity : this._opacity;
    };
    Point.prototype.move = function () {
        var x = this._x;
        var y = this._y;
        if (x >= config_1.WINDOW_WIDTH) {
            this._directionX = Math.random() * -1;
        }
        if (x <= 0) {
            this._directionX = Math.random();
        }
        if (y >= config_1.WINDOW_HEIGHT) {
            this._directionY = Math.random() * -1;
        }
        if (y <= 0) {
            this._directionY = Math.random();
        }
        x += this._speed * this._directionX;
        y += this._speed * this._directionY;
        this.setPosition(x, y);
    };
    Point.prototype.update = function () {
        _super.prototype.update.call(this);
        this.ctx.translate(config_1.WINDOW_WIDTH / 2, config_1.WINDOW_HEIGHT / 2);
        this.ctx.translate(-config_1.WINDOW_WIDTH / 2, -config_1.WINDOW_HEIGHT / 2);
        //console.log(this._opacity);
        this.ctx.strokeStyle = "rgba(255,255,255," + this._opacity + ")";
        this.ctx.fillStyle = "rgba(255,255,255," + this._opacity + ")";
        this.ctx.beginPath();
        this.ctx.arc(this._x, this._y, this._r, 0, 2 * Math.PI);
        this.ctx.stroke();
        this.ctx.fill();
        /* this.ctx.fillStyle = "red";
        this.ctx.fillText(this._id, this._x, this._y);*/
    };
    return Point;
}(ObjectScene_1.default));
exports.default = Point;
},{"./../config":3,"./ObjectScene":1}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var WINDOW_HEIGHT = window.innerHeight;
exports.WINDOW_HEIGHT = WINDOW_HEIGHT;
var WINDOW_WIDTH = window.innerWidth;
exports.WINDOW_WIDTH = WINDOW_WIDTH;
},{}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Point_1 = require("./componets/Point");
var config_1 = require("./config");
var SIZE = 20;
var canvas = document.getElementById("canvas");
var ctx = canvas.getContext("2d");
var DISTANCE = 300;
function setSizeCanvas(canv) {
    canv.setAttribute("width", config_1.WINDOW_WIDTH.toString() + "px");
    canv.setAttribute("height", config_1.WINDOW_HEIGHT.toString() + "px");
}
setSizeCanvas(canvas);
var points = [];
for (var i = 0; i < SIZE; i++) {
    points.push(new Point_1.default(ctx, i, config_1.WINDOW_WIDTH / 2 + Math.sin(10 * i) * (config_1.WINDOW_WIDTH / 5), config_1.WINDOW_HEIGHT / 2 + Math.sin(10 * i) * (config_1.WINDOW_HEIGHT / 5), (Math.random() + 1) * 2, (Math.random() + 1) * (Math.random() + 1)));
}
function Distance(a, b) {
    var x = Math.abs(Math.abs(a.getPosition().x) - Math.abs(b.getPosition().x));
    var y = Math.abs(Math.abs(a.getPosition().y) - Math.abs(b.getPosition().y));
    var c = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));
    var r = 1 - c / DISTANCE;
    return r;
}
function DrawLine(a, b) {
    var r = Distance(a, b) - 0.1;
    var color = "rgba(255, 255, 255," + r + ")";
    ctx.strokeStyle = color;
    ctx.beginPath();
    ctx.moveTo(a.getPosition().x, a.getPosition().y);
    ctx.lineTo(b.getPosition().x, b.getPosition().y);
    ctx.stroke();
    return r;
}
var last = new Date();
function update() {
    var t2 = new Date();
    if (t2.getTime() - last.getTime() > 1000 / 30) {
        ctx.clearRect(0, 0, config_1.WINDOW_WIDTH, config_1.WINDOW_HEIGHT);
        ctx.fillStyle = "black";
        ctx.fillRect(0, 0, config_1.WINDOW_WIDTH, config_1.WINDOW_HEIGHT);
        for (var i = 0; i < SIZE - 1; i++) {
            points[i].move();
            points[i].resetOpacity(0);
            for (var j = 0; j < SIZE - 1; j++) {
                if (i < j) {
                    DrawLine(points[i], points[j]);
                }
                if (i !== j) {
                    var newop = Distance(points[i], points[j]);
                    points[i].setOpacity(newop);
                }
            }
            //console.log(`${i} = ${maxOpacity}`);
            points[i].update();
        }
        last = t2;
    }
    setTimeout(function () {
        update();
    }, 1);
}
setTimeout(function () {
    update();
}, 10);
},{"./componets/Point":2,"./config":3}]},{},[4])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
